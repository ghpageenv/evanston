@page "/"
@using Evanston.Component
@using OneOf
@using OneOf.Types
@inject DirectoryDto Directory
@inject Mappers Mappers

<PageTitle>Businesses | My Evanston</PageTitle>

<style>
    .no-borders > td, .no-borders > tr > th {
        border: none;
    }
</style>

<MudText Align="Align.Center">Welcome to the My Evanston Directory, a directory of all Evanston based organizations.  Here's what makes this directory unique:</MudText>
<br/>
<Centered>
    <ul>
        <li>• Maintainability<MudIconButton OnClick="@(() => _showMaintainabilityDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" /></li>
        <li>• Usability<MudIconButton OnClick="@(() => _showUsabilityDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" /></li>
        <li>• Accessibility<MudIconButton OnClick="@(() => _showAccessibilityDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" /></li>
        <li>• Affordability<MudIconButton OnClick="@(() => _showAffordabilityDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" /></li>
        <li>• Standardization<MudIconButton OnClick="@(() => _showStandardizationDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" /></li>
        <li>• Scalability<MudIconButton OnClick="@(() => _showScalabilityDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" /></li>
    </ul>
</Centered>
<br/>
<MudDivider/>
<br/>
<Centered>
    <MudChipSet T="BusinessCategory" @bind-SelectedValues="_selectedCategories" SelectionMode="SelectionMode.MultiSelection" CheckMark="true">
        @foreach (var category in Categories)
        {
            <MudChip Value="@category.Category" Text="@(category.Description)" Color="Color.Primary" SelectedColor="Color.Secondary" />
        }
    </MudChipSet>
</Centered>
<br/>
<br/>
<MudStack Spacing="3">
    @foreach (var business in Directory.Businesses.Select(b => Mappers.BusinessDtoToModel(b)))
    {
        <div style="display:@(!_selectedCategories.Any() || _selectedCategories.All(c => business.Categories.Contains(c)) ? "block" : "none");">
            <MudCard Outlined="true">
                <MudCardHeader><MudText Typo="Typo.h6">@business.Name</MudText></MudCardHeader>
                <MudCardContent>
                    <MudHidden Breakpoint="@BreakPoint">
                        <Anchor Value="@business.Anchor.Match(value => value, none => "")">
                            <MudStack Spacing="6">
                                @if (business.TargetClient.TryPickT0(out var targetClient, out _))
                                {
                                    <MudText><Centered>Ideal Client:</Centered><br/>@Print(targetClient)</MudText>
                                    <br/>
                                }
                                @if (business.Description.TryPickT0(out var description, out _))
                                {
                                    <MudText><Centered>Description:</Centered><br/>@Print(description)</MudText>
                                    <br/>
                                }
                                @if (business.ChiefExecutive.TryPickT0(out var executive, out _))
                                {
                                    <MudText Align="Align.Center">Executive:<br/>@Print(executive)</MudText>
                                }
                                @if (business.Address.TryPickT0(out var address, out _))
                                {
                                    <MudText Align="Align.Center">Address:<br/>@Print(Print(address))</MudText>
                                }
                                @if (business.Phone.TryPickT0(out var phone, out _))
                                {
                                    <MudText Align="Align.Center">Phone:<br/>@Print(Print(phone))</MudText>
                                }
                                @if (business.Website.TryPickT0(out var website, out _))
                                {
                                    <MudText Align="Align.Center">Website:<br/>@UrlView(website)</MudText>
                                }
                                @if (business.Email.TryPickT0(out var email, out _))
                                {
                                    <MudText Align="Align.Center">Email:<br/>@EmailView(email)</MudText>
                                }
                            </MudStack>
                        </Anchor>
                    </MudHidden>
                    <MudHidden Breakpoint="@BreakPoint" Invert="true">
                        <Anchor Value="@business.Anchor.Match(value => value, none => "")">
                            <MudTable Items="@GetRows(business).Where(row => row.PropertyValue.IsT0)" Hover="true" Breakpoint="Breakpoint.None" RowClass="no-borders">
                                <RowTemplate>
                                    <MudTd Style="text-align:right; vertical-align:top; width:60px;"><MudText>@context.PropertyName</MudText></MudTd>
                                    <MudTd>
                                        @if (context.PropertyValue.TryPickT0(out var propertyValue, out _))
                                        {
                                            switch (context.PropertyName)
                                            {
                                                case WebsiteColumnName:
                                                    @if (context.Model.Website.TryPickT0(out var website, out _))
                                                    {
                                                        <ExternalLink Href="@website.AbsoluteUri">@website.AbsoluteUri</ExternalLink>
                                                    }

                                                    break;

                                                case EmailColumnName:
                                                    if (context.Model.Email.TryPickT0(out var emailValue, out _))
                                                    {
                                                        <MudLink Href="@($"mailto:{emailValue}")">@emailValue</MudLink>
                                                    }

                                                    break;

                                                default:
                                                    <MudText>@Print(propertyValue)</MudText>
                                                    break;
                                            }
                                        }
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </Anchor>
                    </MudHidden>
                </MudCardContent>
            </MudCard>
        </div>
    }
</MudStack>

<MudDialog @bind-Visible="_showAceDialog" Options="@(new DialogOptions() { NoHeader = true })">
    <DialogContent>
        <MudStack>
            <MudText>Ace is a local social club for teens (13-18).</MudText>
            <MudButton OnClick="@(() => _showAceDialog = false)" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Got it!</MudButton>
        </MudStack> 
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_showMaintainabilityDialog" Options="@(new DialogOptions() { NoHeader = true })">
    <DialogContent>
        <MudStack>
            <MudText>The Directory Database will be regularly maintained by Ace<MudIconButton OnClick="@(() => _showAceDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" />.</MudText>
            <MudButton OnClick="@(() => _showMaintainabilityDialog = false)" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Got it!</MudButton>
        </MudStack>
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_showUsabilityDialog" Options="@(new DialogOptions() { NoHeader = true })">
    <DialogContent>
        <MudStack>
            <MudText>The Directory Database can be easily viewed on the Directory Website (the website you're currently on!).  It's a user-friendly website regularly maintained by Ace<MudIconButton OnClick="@(() => _showAceDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" />.</MudText>
            <MudButton OnClick="@(() => _showUsabilityDialog = false)" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Got it!</MudButton>
        </MudStack>
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_showAccessibilityDialog" Options="@(new DialogOptions() { NoHeader = true })">
    <DialogContent>
        <MudStack>
            <MudText>Both the Directory Database and the Directory Website will be <ExternalLink Href="https://gist.github.com/kn9ts/cbe95340d29fc1aaeaa5dd5c059d2e60">perpetually open source</ExternalLink>, meaning they will be free for everyone to use, forever.  No "pay to play" to be added to the directory and no "pay wall" to access the directory.</MudText>
            <MudButton OnClick="@(() => _showAccessibilityDialog = false)" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Got it!</MudButton>
        </MudStack>
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_showAffordabilityDialog" Options="@(new DialogOptions() { NoHeader = true })">
    <DialogContent>
        <MudStack>
            <MudText>Ace@(AceTooltip()) will permanently manage all aspects of the directory.  They will receive a stipend for maintaining the directory.  The stipend will be funded by the businesses in the directory via a contribution of $1/mo, or $12/year.  Ace strictly follows the honor system and no one will be denied directory listing due to non-contribution.</MudText>
            <MudButton OnClick="@(() => _showAffordabilityDialog = false)" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Got it!</MudButton>
        </MudStack>
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_showStandardizationDialog" Options="@(new DialogOptions() { NoHeader = true })">
    <DialogContent>
        <MudStack>
            <MudText>The Directory Database has a <ExternalLink Href="https://acemegaschool.github.io/swagger/">documented standard format</ExternalLink>.  This means any local community can start building and sharing their directory across the nation TODAY!</MudText>
            <MudButton OnClick="@(() => _showStandardizationDialog = false)" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Got it!</MudButton>
        </MudStack>
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_showScalabilityDialog" Options="@(new DialogOptions() { NoHeader = true })">
    <DialogContent>
        <MudStack>
            <MudText>Both the Directory Database & Website can easily combine with other local community directories to build state and national directories.  This is possible due to its standardized and open source format.</MudText>
            <MudButton OnClick="@(() => _showScalabilityDialog = false)" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Got it!</MudButton>
        </MudStack>
    </DialogContent>
</MudDialog>
@code {
    private const Breakpoint BreakPoint = Breakpoint.MdAndUp;
    private const string WebsiteColumnName = "Website:";
    private const string EmailColumnName = "Email:";

    private record RowViewModel(string PropertyName, OneOf<string, None> PropertyValue, Business Model);

    private IReadOnlyCollection<BusinessCategory> _selectedCategories = [];
    private bool _showMaintainabilityDialog;
    private bool _showAccessibilityDialog;
    private bool _showAffordabilityDialog;
    private bool _showUsabilityDialog;
    private bool _showScalabilityDialog;
    private bool _showStandardizationDialog;
    private bool _showAceDialog;

    private RowViewModel[] GetRows(Business business) =>
    [
        new("Executive:", business.ChiefExecutive.MapT0(value => value), business),
        new("Ideal Client:", business.TargetClient, business),
        new("Description:", business.Description, business),
        new("Address:", Print(business.Address), business),
        new("Phone:", Print(business.Phone), business),
        new(WebsiteColumnName, Print(business.Website), business),
        new(EmailColumnName, Print(business.Email), business),
    ];

    private static OneOf<string, None> Print(OneOf<Address, None> address) => address.MapT0(a => a.Value);
    private static OneOf<string, None> Print(OneOf<Phone, None> phone) => phone.MapT0(a => a.Value);
    private static OneOf<string, None> Print(OneOf<Uri, None> website) => website.MapT0(a => a.AbsoluteUri);
    private static OneOf<string, None> Print(OneOf<Email, None> email) => email.MapT0(a => a.Value);
    private static MarkupString Print(OneOf<string, None> value) => (MarkupString)value.Match(theValue => theValue, none => string.Empty);

    private RenderFragment AceTooltip() => __builder =>
    {
        <MudIconButton OnClick="@(() => _showAceDialog = true)" Style="transform: scale(0.5); vertical-align:text-bottom;" Class="mud-theme-primary rounded-circle" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" />
    };

    private RenderFragment UrlView(OneOf<Uri, None> url) => __builder =>
    {
        if (url.TryPickT0(out var urlValue, out _))
        {
            <ExternalLink Href="@urlValue.AbsoluteUri">@urlValue.AbsoluteUri</ExternalLink>
        }
        else
        {
            <MudText>Unknown</MudText>
        }
    };

    private RenderFragment EmailView(OneOf<Email, None> email) => __builder =>
    {
        if (email.TryPickT0(out var emailValue, out _))
        {
            <MudLink Href="@($"mailto:{emailValue}")">@emailValue</MudLink>
        }
        else
        {
            <MudText>Unknown</MudText>
        }
    };

    private static readonly (BusinessCategory Category, string Description)[] Categories =
    [
        (BusinessCategory.FinIns, "Financial & Insurance"),
        (BusinessCategory.ArtsCultureEntertainment, "Arts/Culture/Entertainment"),
        (BusinessCategory.BuildingAndConstruction, "Building & Construction"),
        (BusinessCategory.BusProServices, "Business & Professional Services"),
        (BusinessCategory.Education, "Education"),
        (BusinessCategory.Black, "Black"),
        (BusinessCategory.FamComCiv, "Family, Community, & Civic Resources"),
        (BusinessCategory.Funeral, "Funeral Services"),
        (BusinessCategory.HealthMedical, "Health & Medical"),
        (BusinessCategory.HomeAndGarden, "Home & Garden"),
        (BusinessCategory.Industrial, "Industrial Supplies & Services"),
        (BusinessCategory.MovingStorage, "Moving & Storage"),
        (BusinessCategory.PersonalAndHair, "Personal Services & Hair Care"),
        (BusinessCategory.ShippingMailing, "Shipping & Mailing"),
        (BusinessCategory.RealEstate, "Real Estate"),
        (BusinessCategory.Food, "Restaurants, Food, Catering"),
        (BusinessCategory.Retail, "Shopping and Specialty Retail"),
    ];
}
